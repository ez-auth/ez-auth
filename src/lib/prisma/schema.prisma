generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String? @unique
  phone    String? @unique
  password String?

  /// [UserMetadata]
  metadata Json?

  isAnonymous Boolean @default(false)

  bannedAt     DateTime?
  bannedUntil  DateTime?
  bannedReason String?

  isVerifiedEmail Boolean @default(false)
  isVerifiedPhone Boolean @default(false)

  sessions      Session[]
  identities    Identity[]
  verifications Verification[]
  mfaSettings   MFASettings?
  mfaTokens     MFAToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [email])
  @@index(fields: [phone])
}

model Identity {
  id         String @id @default(cuid())
  provider   String
  providerId String
  data       Json?
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(fields: [provider, providerId])
}

model Session {
  id           String @id @default(cuid())
  userId       String
  refreshToken String @unique

  deviceId  String?
  ipAddress String?
  userAgent String?

  lastUsedAt DateTime?
  expiresAt  DateTime?
  revokedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(fields: [userId])
  @@index(fields: [userId, refreshToken])
}

enum VerificationType {
  Email
  Phone
  PasswordRecoveryByEmail
  PasswordRecoveryByPhone
  EmailChange
  PhoneChange
}

model Verification {
  id     String           @id @default(cuid())
  token  String
  type   VerificationType
  userId String

  sentAt      DateTime  @default(now())
  confirmedAt DateTime?

  /// [VerificationData]
  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token, type, userId])
}

enum MFAProvider {
  TOTP
  Email
  SMS
}

model MFASettings {
  id     String @id @default(cuid())
  userId String

  enabledTOTP Boolean @default(false)
  totpSecret  String?

  enabledEmail Boolean @default(false)

  enabledSMS Boolean @default(false)

  hashedBackupKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum MFATokenType {
  ChangePassword
}

model MFAToken {
  id     String @id @default(cuid())
  userId String

  type        MFATokenType
  provider    MFAProvider
  token       String?
  confirmedAt DateTime?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
  @@index([userId, type, provider])
}

model AuditLog {
  id        String  @id @default(cuid())
  type      String
  data      Json?
  clientIp  String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index(fields: [type])
}

model SystemSetting {
  id   Int  @id @default(1)
  data Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
